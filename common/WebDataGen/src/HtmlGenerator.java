/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package hibench;

import java.util.Random;

/***
 * Settings for creating HTML pages, used by CreateHtmlPagesMapper
 * @author lyi2
 *
 */
public class HtmlGenerator {
	/***
	 * Local settings for CreateHtmlPageMapper
	 */
	public static final int maxUrlLength =100;
	public static final int minUrlLength =10;

	public static final double linkFrequency =0.05;

	public static final int meanContentLen =1500;		// Guassian mean of content length
	public static final double varContentLen =150;		// Guassian variance of content length
	
	public static Random randRandSeed;		// special rand to create random seeds
	public static Random randWord, randLink, randUrl, randPageGo;
	
	public long pages, slotpages;
	
	// random range of links and words
	public long sizelinks, sizewords;

	HtmlGenerator(long sizePages, long sizeSlotPages, long sizeLinkZipf, long sizeWordZipf) {
		pages = sizePages;
		slotpages = sizeSlotPages;
		sizelinks = sizeLinkZipf;
		sizewords = sizeWordZipf;
	}
	
	public static final double getMeanLinksPerPage () {
		return meanContentLen * linkFrequency;
	}

	public static final double getMeanWordsPerPage () {
		return meanContentLen * (1 - linkFrequency);
	}
	
	/***
	 * Get the (id) range of HTML pages to be generated by given slot 
	 * @param slotId: corresponding slot id of current map job
	 * @return
	 */
	public long[] getPageRange(int slotId) {
		long[] range = new long[2]; // range[0]: start page id
									// range[1]: end page id
		
		range[0] = slotpages * (slotId -1);
		range[1] = range[0] + slotpages;
		if (range[1] > pages) {
			range[1] = pages;
		}
		return range;
	}
	
	/***
	 * fire up all required random generators with unique randseeds
	 * @param randseed: random seed of all random generators
	 */
	public void fireRandom(int randseed) {
		randRandSeed = new Random(randseed);

		randUrl = new Random(randRandSeed.nextLong());
		randLink = new Random(randRandSeed.nextLong());
		randWord = new Random(randRandSeed.nextLong());
		randPageGo = new Random(randRandSeed.nextLong());
	}

	/***
	 * Randomly create an url
	 * @param len: length of the url
	 * @return
	 */
	public String createPageUrl(int len) {
		char[] url = new char[len];
		for (int i=0; i<len; i++) {
			url[i] = (char) (randUrl.nextInt(26) + 'a');
		}
		return new String(url);
	}

	/***
	 * get the content length (i.e., number of links/words) of next HTML page
	 * @return
	 */
	public int nextContentLength() {
		return (int) Math.round(meanContentLen
				+ varContentLen*randPageGo.nextGaussian());
	}

	/***
	 * get the length (i.e., number of chars) of next url
	 * @return
	 */
	public int nextUrlLength()
	{
		/***
		 * To be modified
		 */
		return (int) Math.round(
				randPageGo.nextInt(maxUrlLength-minUrlLength+1)+minUrlLength);
	}

	/***
	 * Randomly create on HTML page which includes
	 * 1. url
	 * 2. contained links
	 * 3. contained words
	 * @param pageId
	 * @return
	 */
	public String[] createOnePage(long pageId) {
		int lenUrl = nextUrlLength();
		int lenContent = nextContentLength();

		String[] page = new String[3];	// page[0] -- url
										// page[1] -- link
										// page[2] -- text

		// Create Url
		page[0] = createPageUrl(lenUrl);

		// Create Page Content
		page[1] = new String("");
		page[2] = new String("");
		
		int numWordOrLink = 0;
		int Length = lenContent;
		double Frequency = linkFrequency;
		
		/***
		 * If user defines to skip word generation, only randomly create
		 * links in page and skip all words (i.e., set content length to
		 * be just link numbers and link frequency to be 100%)
		 */
		if (DataOptions.SKIP_WORDS) {
			Length = (int) Math.floor(linkFrequency * lenContent);
			Frequency = 1.0;
		} else if (DataOptions.SKIP_LINKS) {
			Length = (int) Math.floor((1 - linkFrequency) * lenContent);
			Frequency = 0;
		}

		while (numWordOrLink<Length) {
			if (randPageGo.nextDouble() < Frequency) {
				/***
				 * To create a hyperlink
				 */
				page[1] = page[1] + (long)Math.floor(randLink.nextDouble()*sizelinks)
						+ (DataOptions.KEEP_ORDER? ":" + numWordOrLink : "")
						+ " ";
			} else {
				/***
				 * To create a text word
				 */
				page[2] = page[2] + (long)Math.floor(randWord.nextDouble()*sizewords)
						+ (DataOptions.KEEP_ORDER? ":" + numWordOrLink : "")
						+ " ";
			}
			numWordOrLink++;
		}
		
		return page;
	}
}
